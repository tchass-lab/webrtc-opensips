#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#
######################################################
#
## Author: Bertrand GAUDIN
## About: POC WebRTC Media gw, based on RTPEngine module
#
#



####### Global Parameters #########

log_level=4 #debug
#log_level=3 #info
log_stderror=no
log_facility=LOG_LOCAL0


#children=4 #deprecated?!?

/* uncomment the following lines to enable debugging */
#debug_mode=yes
debug_mode=no

/* uncomment the next line to enable the auto temporary blacklisting of
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on reverse DNS on IPs */
auto_aliases=no

###xlog level
#xlog_buf_size = 8388608 #given in bytes
xlog_print_level = 3 #2 #L_NOTICE
xlog_level = 3 #L_INFO

# Set up listeners
listen=ws:10.108.1.11:8080
listen=wss:10.108.1.11:443
listen=udp:10.108.1.11:5060
listen=tls:10.108.1.11:5061


####### Modules Section ########

#set module path
mpath="/usr/lib64/opensips/modules"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-no-db")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)

#### Nathelper protocol
loadmodule "nathelper.so"
modparam("registrar|nathelper", "received_avp", "$avp(rcv)")

#### UDP protocol
loadmodule "proto_udp.so"

### Tracer module
#loadmodule "tracer.so"
#modparam("tracer", "trace_on", 1)

#### TLS protocol
loadmodule "proto_tls.so"
loadmodule "tls_mgm.so"

#### WebSocket and WebSocketSecure protocol
loadmodule "proto_wss.so"
loadmodule "proto_ws.so"

# Certificate management: Server Domain
modparam("tls_mgm", "server_domain", "self")
#modparam("tls_mgm", "match_ip_address", "[self]10.108.1.11:443")
#modparam("tls_mgm", "match_sip_domain", "[self]labce.arkadin.com")
#modparam("tls_mgm", "tls_method", "[self]SSLv23")
#modparam("tls_mgm", "ciphers_list", "[self]AES256-GCM-SHA384,AES256-SHA256,AES256-SHA,CAMELLIA256-SHA,AES128-SHA,CAMELLIA128-SHA,RC4-SHA")
modparam("tls_mgm", "certificate", "[self]/etc/ssl/mycerts/fullchain.pem")
modparam("tls_mgm", "private_key", "[self]/etc/ssl/mycerts/privkey.pem")
modparam("tls_mgm", "verify_cert", "[self]0")
modparam("tls_mgm", "require_cert", "[self]0")

#### RTPengine protocol
loadmodule "rtpengine.so"
modparam("rtpengine", "rtpengine_sock", "udp:10.108.1.11:60000")


####### Routing Logic ########

# main request routing logic

route{

        #script_trace( 1, "$rm from $si, ruri=$ru", "me");

        xlog("L_INFO", "************* Startint routing logic  ************\n");

        if (!mf_process_maxfwd_header(10)) {
                send_reply(483,"Too Many Hops");
                exit;
        }


                # check if the clients are using WebSockets or WebSocketSecure
                xlog("L_INFO", "Check if proto $pr is WebSocket or WebSocketSecure\n");
                if ($pr == "ws" || $pr == "wss"){
                                setflag(SRC_WS);
                                xlog("L_INFO", "Source: $pr is WebSocket\n");
                }
                else {
                                setflag(SRC_SIP);
                                xlog("L_INFO", "Source: $pr is SIP\n");
                }

                # consider the client is behind NAT - always fix the contact
                ##xlog("L_INFO", "Client is behind NAT - always fix the contact ...\n");
                #fix_nated_contact();

        if (is_method("REGISTER")) {
                                xlog("L_INFO", "If REGISTER, check DTLS support\n");
                                # indicate that the client supports DTLS
                                # so we know when he is called
                                if (isflagset(SRC_WS))
                                                setbflag(DST_WS);

                                fix_nated_register();
                if (!save("location"))
                                                sl_reply_error();

                exit;
        }

        if (has_totag()) {

                # handle hop-by-hop ACK (no routing required)
                if ( is_method("ACK") && t_check_trans() ) {
                        t_relay();
                        exit;
                }

                # sequential request within a dialog should
                # take the path determined by record-routing
                if ( !loose_route() ) {
                        # we do record-routing for all our traffic, so we should not
                        # receive any sequential requests without Route hdr.
                        send_reply(404,"Not here");
                        exit;
                }

                if (is_method("BYE")) {
                        # do accounting even if the transaction fails
                        do_accounting("log","failed");
                }

                # route it out to whatever destination was set by loose_route()
                # in $du (destination URI).
                route(relay);
                exit;
        }

        # CANCEL processing
        if (is_method("CANCEL")) {
                if (t_check_trans())
                        t_relay();
                exit;
        }

        # absorb retransmissions, but do not create transaction
        t_check_trans();

        if ( !(is_method("REGISTER")  ) ) {

                if (is_myself("$fd")) {

                } else {
                        # if caller is not local, then called number must be local

                        if (!is_myself("$rd")) {
                                #send_reply(403,"Relay Forbidden");
                                #exit;
                        }
                }

        }

        # preloaded route checking
        if (loose_route()) {
                xlog("L_ERR",
                        "Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
                if (!is_method("ACK"))
                        send_reply(403,"Preload Route denied");
                exit;
        }

        # record routing
        if (!is_method("REGISTER|MESSAGE"))
                                xlog("L_INFO", "Record routing\n");
                record_route();

        # account only INVITEs
        if (is_method("INVITE")) {

                                xlog("L_INFO", "account only Invites\n");
                do_accounting("log");
                fix_nated_contact();
                                #rtpengine_manage();

                if($rU =~ "[0-9]{1,}") {
                                        xlog("L_INFO", "Forward $ru to Viper audio bridge\n");
                        $ru ="sip:"+$rU+"@10.102.33.101:5060";
                        xlog("L_INFO", "New dest:$ru \n");

                                xlog("L_INFO", "Goto relay\n");
                                route(relay);
               }
        }


        if (!is_myself("$rd")) {
                append_hf("P-hint: outbound\r\n");
                route(relay);
        }

        # requests for my domain
        if (is_method("PUBLISH|SUBSCRIBE")) {
                send_reply(503, "Service Unavailable");
                exit;
        }

        if ($rU==NULL) {
                # request with no Username in RURI
                send_reply(484,"Address Incomplete");
                exit;
        }

        # do lookup with method filtering
        if (!lookup("location","m")) {
                t_reply(404, "Not Found");
                exit;
        }

        # when routing via usrloc, log the missed calls also
        do_accounting("log","missed");
        route(relay);
}


route[relay] {
        # for INVITEs enable some additional helper routes
                xlog("L_INFO", "Start route [relay]\n");
        if (is_method("INVITE") || is_method("ACK")) {
                t_on_branch("rtpengine");
                t_on_reply("reply");
                t_on_failure("missed_call");
        } else if (is_method("BYE|CANCEL")) {
                rtpengine_delete();
                }


        if (!t_relay()) {
                send_reply(500,"Internal Error");
        }
        exit;
}




branch_route[per_branch_ops] {
        xlog("new branch at $ru\n");
}


branch_route[rtpengine] {
        xlog("L_INFO","Start RTPEngine branch ######################\n");

        # handle rtp proxying for both initial and sequential requests
        if ( (is_method("INVITE") || is_method("ACK") || is_method("PRACK")) && has_body("application/sdp") ) {
        # set rtpengine flags based on whether uac or uas are websockets
                xlog("L_INFO","Set rtpengine flags depending on uac and uas.\n");
                if (isflagset(SRC_WS) && isbflagset(DST_WS)) {
                        $var(rtpengine_flags) = "ICE=force-relay DTLS=passive";
                        xlog("L_INFO","$var(branch_log) $cs: $rm: uac and uas are both websockets\n");
                }
                else if (isflagset(SRC_WS) && !isbflagset(DST_WS)) {
                        $var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
                        xlog("L_INFO","$var(branch_log) $cs: $rm: uac is ws uas is not\n");
                }
                else if (!isflagset(SRC_WS) && isbflagset(DST_WS)) {
                        $var(rtpengine_flags) = "UDP/TLS/RTP/SAVPF ICE=force";
                        xlog("L_INFO","$var(branch_log) $cs: $rm: uas is ws uac is not\n");
                }
                else if (!isflagset(SRC_WS) && !isbflagset(DST_WS)) {
                        $var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
                        xlog("L_INFO","$var(branch_log) $cs: $rm: neither uac or uas are websocket\n");
                }

                if( is_method("ACK") || is_method("PRACK") ){
                        xlog("L_INFO","$var(branch_log) $cs: $rm: rtpengine answer $var(rtpengine_flags)\n");
                        rtpengine_answer("$var(rtpengine_flags)");
                } else {
                        rtpengine_offer("$var(rtpengine_flags)");
                        xlog("L_INFO","$var(branch_log) $cs: $rm: rtpengine offer $var(rtpengine_flags)\n");
                }
        }
}
onreply_route["reply"] {
                xlog("L_INFO","Start Reply branch ######################\n");

                fix_nated_contact();
        if (!has_body("application/sdp"))
                return;

                $var(reply_log)="onreply_route:";
                xlog("L_INFO","$var(reply_log) $cs: $rs: response\n");
                xlog("L_INFO","$var(reply_log) $cs: $rs: message flags: $mf\n");
                xlog("L_INFO","$var(reply_log) $cs: $rs: branch flags: $bf\n");

                # rtp proxying for responses
                if ( has_body("application/sdp") ) {

                        #Change Cnx IP@

                        # set rtpengine flags based on whether uac or uas are websockets
                        if (isflagset(SRC_WS) && isbflagset(DST_WS)) {
                                $var(rtpengine_flags) = "ICE=force DTLS=passive";
                                xlog("L_INFO","$var(reply_log) $cs: $rs: uac and uas are both websockets\n");
                        }
                        else if (isflagset(SRC_WS) && !isbflagset(DST_WS)) {
                                $var(rtpengine_flags) = "UDP/TLS/RTP/SAVPF ICE=force replace-origin";
                                xlog("L_INFO","$var(reply_log) $cs: $rs: uac is ws uas is not\n");
                        }
                        else if (!isflagset(SRC_WS) && isbflagset(DST_WS)) {
                                $var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
                                xlog("L_INFO","$var(reply_log) $cs: $rs: uas is ws uac is not\n");
                        }
                        else if (!isflagset(SRC_WS) && !isbflagset(DST_WS)) {
                                $var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
                                xlog("L_INFO","$var(reply_log) $cs: $rs: neither uac or uas are websocket\n");
                        }

                        if ( $rs=="183" ) {
                                xlog("L_INFO","$var(reply_log) $cs: $rs: rtpengine offer $var(rtpengine_flags)\n");
                                rtpengine_offer("$var(rtpengine_flags)");
                        } else if ( $rs=="200" ) {
                                xlog("L_INFO","$var(reply_log) $cs: $rs: rtpengine answer $var(rtpengine_flags)\n");
                                rtpengine_answer("$var(rtpengine_flags)");
                        }
                }

}



failure_route[missed_call] {
        if (t_was_cancelled()) {
                exit;
        }

        # uncomment the following lines if you want to block client
        # redirect based on 3xx replies.
        ##if (t_check_status("3[0-9][0-9]")) {
        ##t_reply(404,"Not found");
        ##      exit;
        ##}


}

